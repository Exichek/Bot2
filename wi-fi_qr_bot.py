import os
import qrcode
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from PIL import Image

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π)
BOT_TOKEN = "7320074229:AAG19mqnGv2wgIx1kn5x_dXAhl6ZQOThk-A"


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞
def generate_wifi_qr(ssid: str, password: str, encryption: str = "WPA") -> str:
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è QR-–∫–æ–¥–∞
    if encryption.upper() == "WEP":
        wifi_data = f"WIFI:T:WEP;S:{ssid};P:{password};;"
    elif encryption.upper() == "NOPASS":
        wifi_data = f"WIFI:T:nopass;S:{ssid};;"
    else:
        wifi_data = f"WIFI:T:WPA;S:{ssid};P:{password};;"

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥
    qr = qrcode.QRCode(version=1, box_size=10, border=5)
    qr.add_data(wifi_data)
    qr.make(fit=True)

    # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    img = qr.make_image(fill_color="black", back_color="white")
    file_path = f"{ssid}_wifi_qr.png"
    img.save(file_path)

    return file_path


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–æ–≤ Wi-Fi.\n"
        "–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫–∞–∫ –º–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è, –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É /help."
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "üìö **–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:**\n\n"
        "1. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –¥–∞–Ω–Ω—ã–µ Wi-Fi –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "`<SSID> <–ø–∞—Ä–æ–ª—å> <—Ç–∏–ø —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è>`\n\n"
        "üîπ **SSID** ‚Äî –∏–º—è –≤–∞—à–µ–π Wi-Fi —Å–µ—Ç–∏.\n"
        "üîπ **–ü–∞—Ä–æ–ª—å** ‚Äî –ø–∞—Ä–æ–ª—å –æ—Ç —Å–µ—Ç–∏. –ï—Å–ª–∏ –ø–∞—Ä–æ–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–æ–±–µ–ª—ã, –∑–∞–∫–ª—é—á–∏ –µ–≥–æ –≤ –∫–∞–≤—ã—á–∫–∏.\n"
        "üîπ **–¢–∏–ø —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è** ‚Äî WPA, WEP –∏–ª–∏ NOPASS (–¥–ª—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–µ—Ç–µ–π).\n\n"
        "üìù **–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:**\n"
        "- `MyWiFi MyPassword123 WPA`\n"
        "- `OpenNetwork NOPASS`\n"
        "- `OldWiFi 12345 WEP`\n"
        "- `MyWiFi \"My Password With Spaces\" WPA`\n\n"
        "2. –Ø –æ—Ç–ø—Ä–∞–≤–ª—é —Ç–µ–±–µ QR-–∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Wi-Fi.\n\n"
        "üîê **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è:**\n"
        "- **WPA** (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)\n"
        "- **WEP**\n"
        "- **NOPASS** (–æ—Ç–∫—Ä—ã—Ç–∞—è —Å–µ—Ç—å –±–µ–∑ –ø–∞—Ä–æ–ª—è)"
    )
    await update.message.reply_text(help_text, parse_mode="Markdown")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        text = update.message.text.strip()

        # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏
        parts = text.split(maxsplit=2)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        if len(parts) < 2:
            await update.message.reply_text(
                "‚ùå **–û—à–∏–±–∫–∞:** –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö.\n\n"
                "üìù –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç:\n"
                "`<SSID> <–ø–∞—Ä–æ–ª—å> <—Ç–∏–ø —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è>`\n\n"
                "–ü—Ä–∏–º–µ—Ä: `MyWiFi MyPassword123 WPA`"
            )
            return

        # –ò–∑–≤–ª–µ–∫–∞–µ–º SSID, –ø–∞—Ä–æ–ª—å –∏ —Ç–∏–ø —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
        ssid = parts[0]
        password = parts[1].strip('"')  # –£–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        encryption = parts[2] if len(parts) > 2 else "WPA"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
        if encryption.upper() not in ["WPA", "WEP", "NOPASS"]:
            await update.message.reply_text(
                "‚ùå **–û—à–∏–±–∫–∞:** –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è.\n\n"
                "üîê –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã:\n"
                "- WPA\n"
                "- WEP\n"
                "- NOPASS"
            )
            return

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥
        qr_file = generate_wifi_qr(ssid, password, encryption)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º QR-–∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        with open(qr_file, "rb") as f:
            await update.message.reply_photo(
                photo=f,
                caption=f"üîë **QR-–∫–æ–¥ –¥–ª—è —Å–µ—Ç–∏:** {ssid}\n"
                        f"üîí **–¢–∏–ø —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è:** {encryption.upper()}"
            )

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(qr_file)

    except Exception as e:
        await update.message.reply_text(
            f"‚ùå **–û—à–∏–±–∫–∞:** –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.\n\n–û—à–∏–±–∫–∞: {e}")


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞
    application = Application.builder().token(BOT_TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()


if __name__ == "__main__":
    main()
